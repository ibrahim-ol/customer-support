import { FC } from "hono/jsx";
import { MoodCategory } from "../../../types/mood.ts";

interface RecentSummary {
  id: string;
  customerName: string;
  channel: string;
  mood: MoodCategory;
  status: "active" | "killed";
  createdAt: Date;
  updatedAt: Date;
  summary: string;
  summaryUpdatedAt: Date;
}

interface RecentSummariesProps {
  summaries: RecentSummary[];
  isLoading?: boolean;
  error?: string;
}

export const RecentSummaries: FC<RecentSummariesProps> = ({
  summaries,
  isLoading = false,
  error,
}) => {
  const getMoodEmoji = (mood: MoodCategory): string => {
    const emojis: Record<MoodCategory, string> = {
      happy: "üòä",
      frustrated: "üò§",
      confused: "üòï",
      angry: "üò†",
      satisfied: "üòå",
      neutral: "üòê",
      excited: "ü§©",
      disappointed: "üòû",
    };
    return emojis[mood];
  };

  const getMoodColor = (mood: MoodCategory): string => {
    const colors: Record<MoodCategory, string> = {
      happy: "text-green-600 bg-green-50",
      frustrated: "text-orange-600 bg-orange-50",
      confused: "text-yellow-600 bg-yellow-50",
      angry: "text-red-600 bg-red-50",
      satisfied: "text-blue-600 bg-blue-50",
      neutral: "text-gray-600 bg-gray-50",
      excited: "text-purple-600 bg-purple-50",
      disappointed: "text-indigo-600 bg-indigo-50",
    };
    return colors[mood];
  };

  const formatDate = (dateString: Date | string) => {
    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;
    return date.toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const truncateText = (text: string, maxLength: number = 120) => {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + "...";
  };

  if (isLoading) {
    return (
      <div>
        <h3 className="text-lg font-semibold text-black mb-4 flex items-center">
          <span className="mr-2">üìã</span>
          Recent Conversation Summaries
        </h3>
        <div className="space-y-4">
          {[1, 2, 3].map((i) => (
            <div key={i} className="bg-white border border-gray-200 rounded-lg p-4">
              <div className="animate-pulse">
                <div className="flex justify-between items-start mb-3">
                  <div className="h-4 bg-gray-300 rounded w-1/3"></div>
                  <div className="h-3 bg-gray-300 rounded w-16"></div>
                </div>
                <div className="space-y-2">
                  <div className="h-3 bg-gray-300 rounded w-full"></div>
                  <div className="h-3 bg-gray-300 rounded w-3/4"></div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div>
        <h3 className="text-lg font-semibold text-black mb-4 flex items-center">
          <span className="mr-2">üìã</span>
          Recent Conversation Summaries
        </h3>
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="text-center py-4">
            <div className="text-red-400 text-3xl mb-2">‚ö†Ô∏è</div>
            <p className="text-red-600 text-sm">
              Error loading summaries: {error}
            </p>
          </div>
        </div>
      </div>
    );
  }

  if (!summaries || summaries.length === 0) {
    return (
      <div>
        <h3 className="text-lg font-semibold text-black mb-4 flex items-center">
          <span className="mr-2">üìã</span>
          Recent Conversation Summaries
        </h3>
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
          <div className="text-center py-8">
            <div className="text-gray-400 text-4xl mb-3">üìù</div>
            <h4 className="text-lg font-medium text-gray-600 mb-2">
              No summaries available
            </h4>
            <p className="text-gray-500 text-sm">
              Conversation summaries will appear here as they are generated by the AI system.
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold text-black flex items-center">
          <span className="mr-2">üìã</span>
          Recent Conversation Summaries
        </h3>
        <a
          href="/admin/conversations"
          className="text-sm text-blue-600 hover:text-blue-800 underline"
        >
          View all conversations ‚Üí
        </a>
      </div>

      <div className="space-y-4">
        {summaries.map((summary) => (
          <div
            key={summary.id}
            className="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow"
          >
            <div className="flex justify-between items-start mb-3">
              <div className="flex items-center space-x-2">
                <h4 className="font-medium text-black">
                  {summary.customerName || "Anonymous"}
                </h4>
                <span
                  className={`text-xs px-2 py-0.5 rounded border ${getMoodColor(summary.mood)}`}
                  title={`Mood: ${summary.mood}`}
                >
                  {getMoodEmoji(summary.mood)}
                </span>
                {summary.status === "killed" && (
                  <span className="text-xs bg-red-100 text-red-800 px-2 py-0.5 rounded">
                    KILLED
                  </span>
                )}
              </div>
              <div className="text-right">
                <div className="text-xs text-gray-500">
                  {summary.channel}
                </div>
                <div className="text-xs text-gray-400">
                  {formatDate(summary.summaryUpdatedAt)}
                </div>
              </div>
            </div>

            <div className="bg-blue-50 border-l-4 border-blue-200 p-3 rounded-r">
              <p className="text-sm text-gray-700 leading-relaxed">
                {truncateText(summary.summary)}
              </p>
              <div className="mt-2 flex items-center justify-between">
                <div className="flex items-center text-xs text-blue-600">
                  <span className="mr-1">ü§ñ</span>
                  <span>AI Summary</span>
                </div>
                <a
                  href={`/admin/conversations?selected=${summary.id}`}
                  className="text-xs text-blue-600 hover:text-blue-800 underline"
                >
                  View conversation
                </a>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};
